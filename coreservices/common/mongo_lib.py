#!/bin/pythonimport randomimport sysimport datetimeimport re#settings fileimport APIsettings as settingsfrom flask import Flask, abort, request, jsonify, g, url_forfrom flask_mongoalchemy import MongoAlchemyfrom flask_httpauth import HTTPBasicAuthfrom passlib.apps import custom_app_context as pwd_contextfrom itsdangerous import (TimedJSONWebSignatureSerializer as Serializer, BadSignature, SignatureExpired)from flask_pymongo import PyMongoapp = Flask(__name__)app.config['SECRET_KEY'] = settings.SECRET_KEYapp.config['MONGOALCHEMY_DATABASE'] = settings.MONGO_DBNAMEapp.config['MONGOALCHEMY_SERVER'] = settings.MONGO_HOSTapp.config['MONGOALCHEMY_PORT'] = settings.MONGO_PORTapp.config['MONGO_HOST'] = settings.MONGO_HOSTapp.config['MONGO_PORT'] = settings.MONGO_PORTapp.config['MONGO_DBNAME'] = settings.MONGO_DBNAMEapp.config['API_VER'] = settings.API_VERSIONapp.config['MONGO_URI'] = settings.MONGO_URIdb = MongoAlchemy(app)auth = HTTPBasicAuth()mongo = PyMongo(app)class Account(db.Document):    username = db.StringField()    password_hash = db.StringField()    userid = db.AnythingField()    role = db.StringField()    def gen_id(self):        key_num = random.SystemRandom()        self.userid = key_num.randint(0, sys.maxsize)        return self.userid    def hash_password(self, password):        self.password_hash = pwd_context.encrypt(password)    def verify_password(self, password):        return pwd_context.verify(password, self.password_hash)    def generate_auth_token(self, expiration):        s = Serializer(app.config['SECRET_KEY'], expires_in=expiration)        return s.dumps({'userid': self.userid})    def add_role(self,r):        role_list = ['user', 'admin', 'support','system']        if(r in role_list):            self.role = r    @staticmethod    def verify_auth_token(token):        s = Serializer(app.config['SECRET_KEY'])        try:            data = s.loads(token)        except SignatureExpired as e:            return None    # valid token, but expired        except BadSignature as f:            return None   # invalid token        user = mongo.db.Account.find_one({'userid':data['userid']})        return user['userid']class AccountSpecs(db.Document):    userid = db.AnythingField()    firstname = db.StringField()    lastname = db.StringField()    email = db.StringField()class SensorCatalog(db.Document):    #Catalog of supported sensors, updated from time to time    sensor_type = db.StringField()
    #sensor_id ex - dht11    sensor_id = db.AnythingField()    sensor_desc = db.StringField()    def sensor_type(self,sensor_type):        sensor_types = ['temp','photo','power','pressure']        if(str(sensor_type).lower in sensor_types):            self.sensor_type = sensor_typeclass SensorInventory(db.Document):    #Inventory of sensors attached to the rackbrain     sensor_type = db.StringField()    sensor_name = db.StringField()    sensor_desc = db.StringField()    sensor_serial = db.AnythingField()        def sensor_serial(self):        key_num = random.SystemRandom()        self.sensorserial = key_num.randint(0, sys.maxsize)        return self.sensorserial    def sensor_type(self,sensor_type):        self.sensortype = sensor_type    def sensor_name(self,sensor_name):        self.sensor_name = sensor_name    def sensor_desc(self,sensor_desc):        self.sensor_desc = sensor_descclass Reading(db.Document):    reading = db.StringField()    reading_id = db.AnythingField()    reading_time = db.AnythingField()    reading_type = db.StringField()    reading_unit = db.StringField()    sensor_serial = db.AnythingField()    def reading_id(self):        key_num = random.SystemRandom()        self.reading_id = key_num.randint(0, sys.maxsize)        return self.reading_id    def reading_time(self):        self.reading_time = time.time()        return self.reading_timeclass DeviceCatalog(db.Document):    #Catalog of supported devices    device_type = db.StringField()    device_name = db.StringField()    device_serial = db.AnythingField()    device_desc = db.StringField()    def device_type(self,sensortype):        device_types = ['fan','display']        if(str(devicetype).lower in device_types):            self.device_type = device_type        else:            abort(406)    def device_name(self,device_name):        self.device_name = device_name        def device_serial(self,device_serial):        self.device_serial = device_serial        def device_desc(self,device_desc):        self.device_desc = device_descclass AttachedDevice(db.Document):
    #Devices attached to the rackbrain    device_type = db.StringField()    device_name = db.StringField()    device_serial = db.AnythingField()    device_desc = db.StringField()        def device_serial(self):        key_num = random.SystemRandom()        self.device_serial = key_num.randint(0, sys.maxsize)        return self.device_serial        def devcie_type(self,device_type):        self.device_type = device_type    def device_name(self,device_name):        self.device_name = device_name    def device_desc(self,device_desc):        self.device_desc = device_descclass RackBrainSys(db.Document):    rackid = db.AnythingField()    manufacture_date = db.AnythingField()    location = db.StringField()    setup_date = db.AnythingField()    version = db.StringField()        def location(self,location):        self.location = location        def version(self,version):        self.version = version            def setup_date(self,date):        self.date = date        